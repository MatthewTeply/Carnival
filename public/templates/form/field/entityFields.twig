<style>
    .field-container {
        position: relative;
        border-radius: 3px;
        padding: 15px;
        height: auto;
        color: #000;
        margin: 8px 0;
        font-size: 14px;
        background-color: rgba(255, 255, 255, .1);
        border: 2px solid var(--col-side-nav);
    }

    .entity-field-label {
        display: block;
        margin-top: 10px;
        margin-bottom: 4px;
    }

    .entity-field-label:first-of-type {
        margin-top: 0;
    }

    .metadata-container {
        padding: 0;
        padding-bottom: 10px;
    }

    .metadata-container .row {
        margin-bottom: 10px;
        border-bottom: 2px solid #eee;
        padding: 10px;
    }

    .metadata-container .col {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
    }

    .metadata-add-btn {
        margin-top: 10px;
    }

    .field-delete-btn {
        display: block;
        margin-top: 10px;
    }

    .field-control-btns {
        display: block;
        margin-top: 10px;
    }

    .field-control-btns .btn {
        display: inline-block;
        vertical-align: bottom;
    }
</style>

<div class="col-lg-12 form-input-around">
    <div class="field-label">{{ label }}</div>

    <input type="hidden" id="entity-json-{{ name }}" name="{{ name }}[value]">

    <div class="form-control" id="app-entity-fields">
        <div class="field-container" v-for="(field, fieldKey) in fields">
            <b class="entity-field-label">Name</b>
            <input type="text" class="form-control" placeholder="Field name" v-on:change="updateJson" v-model="field['name']">

            <b class="entity-field-label">Type</b>
            <input type="text" class="form-control" placeholder="Field type" v-on:change="updateJson" v-model="field['type']">

            <b class="entity-field-label">Metadata</b>
            <div class="form-control metadata-container">
                <div class="container-fluid">
                    <div class="row" v-for="(data, dataKey) in field['metadata']">
                        <div class="col col-5">
                            <input type="text" class="form-control" placeholder="Key" v-on:change="updateJson" v-model="data['key']">
                        </div>
                        <div class="col col-sm-1">
                            <i class="fas fa-long-arrow-alt-right"></i>
                        </div>
                        <div class="col col-5">
                            <input type="text" class="form-control" placeholder="Value" v-on:change="updateJson" v-model="data['value']">
                        </div>
                        <div class="col col-1">
                            <button type="button" class="btn btn-danger data-delete-btn" v-on:click="field['metadata'].splice(dataKey, 1)"><i class="fas fa-trash-alt"></i> Delete</button>
                        </div>
                    </div>

                    <button type="button" class="btn btn-black metadata-add-btn" v-on:click="addMetadata(fieldKey)"><i class="fas fa-plus"></i> Add data</button>
                </div>
            </div>

            <nav class="field-control-btns">
                <button type="button" class="btn btn-secondary field-copy-btn" v-on:click="copyField(field)"><i class="fas fa-copy"></i> Copy field</button>
                <button type="button" class="btn btn-danger field-delete-btn" v-on:click="fields.splice(fieldKey, 1)"><i class="fas fa-trash-alt"></i> Delete field</button>
            </nav>
        </div>

        <button type="button" class="btn btn-black" v-on:click="addField"><i class="fas fa-plus"></i> Add field</button>
    </div>
</div>

<script>
    let valueFields = JSON.parse(`{{ value is defined ? value|raw : "[]" }}`);
    let translatedFields = [];

    if(Object.keys(valueFields).length != 0) {
        for(let fieldName of Object.keys(valueFields)) {
            let translatedField = {};
            
            translatedField.name = fieldName;
            translatedField.type = valueFields[fieldName].type;

            translatedField.metadata = [];
            
            for(let metadataName of Object.keys(valueFields[fieldName].metadata)) {
                let newMetaData = {};

                newMetaData.key   = metadataName;
                newMetaData.value = valueFields[fieldName].metadata[metadataName];

                translatedField.metadata.push(newMetaData);
            }

            translatedFields.push(translatedField);
        }
    }

    window.entityFields['{{ name }}'] = new Vue({
        el: '#app-entity-fields',
        delimiters: ['${', '}'],
        data: {
            fields: translatedFields
        },
        methods: {
            updateJson() {
                let json = {};

                for(let field of this.fields) {
                    json[field.name] = {
                        type: field.type,
                        metadata: {}
                    }

                    for(let data of field.metadata) {
                        json[field.name].metadata[data.key] = data.value;
                    }
                }

                document.querySelector('#entity-json-{{ name }}').value = JSON.stringify(json);
            },
            addField() {
                this.fields.push({
                    name: '',
                    type: '',
                    metadata: []
                });

                this.updateJson();
            },
            copyField(field) {
                this.fields.push(JSON.parse(JSON.stringify(field)));
            },
            addMetadata(fieldIndex) {
                this.fields[fieldIndex].metadata.push({});

                this.updateJson();
            }
        }
    });
</script>